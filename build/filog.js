// Generated by CoffeeScript 1.8.0
(function() {
  var Filog,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Filog = (function() {
    var location, pretty, type;

    Filog.prototype.toString = function() {
      return '[object Filog]';
    };

    Filog.prototype.$el = null;

    function Filog(opt) {
      if (opt == null) {
        opt = {};
      }
      this.log = __bind(this.log, this);
      switch (type(opt)) {
        case 'string':
          this.selector = opt;
          break;
        case 'object':
          this.selector = opt.selector;
          break;
        default:
          throw new Error("'opt' is type '" + (type(opt)) + "', not 'string|object'");
      }
    }

    Filog.prototype.log = function() {
      var arg;
      console.log.apply(console, arguments);
      if (this.$el == null) {
        this.$el = document.querySelector(this.selector);
      }
      if (this.$el) {
        this.$el.innerHTML += (((function() {
          var _i, _len, _ref, _results;
          _ref = [].slice.call(arguments);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            arg = _ref[_i];
            _results.push(pretty(arg));
          }
          return _results;
        }).apply(this, arguments)).join(' ')) + '\n';
        return this.$el.scrollTop = this.$el.scrollHeight;
      }
    };

    pretty = function(value) {
      var type;
      if (null === value) {
        return '<em class="filog-null">[null]</em>';
      }
      type = {}.toString.call(value).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
      switch (type) {
        case 'string':
          return value.replace(/</g, '&lt;');
        case 'undefined':
          return '<em class="filog-undefined">[undefined]</em>';
        case 'error':
          return "<em class=\"filog-location\">" + (location(value)) + "</em> <em class=\"filog-error\">" + value.message + "</em>";
        case 'array':
          return "<em class=\"filog-array\">[.." + value.length + "..]</em>";
        default:
          return "<em class=\"filog-" + type + "\">" + value + "</em>";
      }
    };

    location = function(error) {
      var stack, _ref;
      stack = error.stack.split('\n');
      if ('Error: ' + error.message === stack[0]) {
        stack.shift();
      }
      return (_ref = stack[0].match(/\/([^.\/]+\.(js|html?):\d+(:\d+)?)/)) != null ? _ref[1] : void 0;
    };

    type = function(x) {
      return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
    };

    return Filog;

  })();

  window.Filog = Filog;

}).call(this);
