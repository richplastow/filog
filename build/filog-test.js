// Generated by CoffeeScript 1.8.0
(function() {
  var Filog, Test, test,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Filog = (function() {
    var location, pretty, type;

    Filog.prototype.toString = function() {
      return '[object Filog]';
    };

    Filog.prototype.$el = null;

    function Filog(opt) {
      if (opt == null) {
        opt = {};
      }
      this.log = __bind(this.log, this);
      switch (type(opt)) {
        case 'string':
          this.selector = opt;
          break;
        case 'object':
          this.selector = opt.selector;
          break;
        default:
          throw new Error("'opt' is type '" + (type(opt)) + "', not 'string|object'");
      }
    }

    Filog.prototype.log = function() {
      var arg;
      console.log.apply(console, arguments);
      if (this.$el == null) {
        this.$el = document.querySelector(this.selector);
      }
      if (this.$el) {
        this.$el.innerHTML += (((function() {
          var _i, _len, _ref, _results;
          _ref = [].slice.call(arguments);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            arg = _ref[_i];
            _results.push(pretty(arg));
          }
          return _results;
        }).apply(this, arguments)).join(' ')) + '\n';
        return this.$el.scrollTop = this.$el.scrollHeight;
      }
    };

    pretty = function(value) {
      var type;
      if (null === value) {
        return '<em class="filog-null">[null]</em>';
      }
      type = {}.toString.call(value).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
      switch (type) {
        case 'string':
          return value.replace(/</g, '&lt;');
        case 'undefined':
          return '<em class="filog-undefined">[undefined]</em>';
        case 'error':
          return "<em class=\"filog-location\">" + (location(value)) + "</em> <em class=\"filog-error\">" + value.message + "</em>";
        case 'array':
          return "<em class=\"filog-array\">[.." + value.length + "..]</em>";
        default:
          return "<em class=\"filog-" + type + "\">" + value + "</em>";
      }
    };

    location = function(error) {
      var stack, _ref;
      stack = error.stack.split('\n');
      if ('Error: ' + error.message === stack[0]) {
        stack.shift();
      }
      return (_ref = stack[0].match(/\/([^.\/]+\.(js|html?):\d+(:\d+)?)/)) != null ? _ref[1] : void 0;
    };

    type = function(x) {
      return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
    };

    return Filog;

  })();

  window.Filog = Filog;

  Test = (function() {
    var type;

    Test.prototype.toString = function() {
      return '[object Test]';
    };

    Test.prototype.jobs = [];

    function Test(opt) {
      if (opt == null) {
        opt = {};
      }
      this.run = __bind(this.run, this);
    }

    Test.prototype.run = function() {
      var actual, double, expect, job, md, name, result, runner, _i, _len, _ref;
      md = ['<a href="#end" id="top">\u2b07</a>'];
      double = null;
      _ref = this.jobs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        job = _ref[_i];
        switch (type(job)) {
          case 'function':
            double = job(double);
            break;
          case 'string':
            md.push(job);
            break;
          case 'array':
            runner = job[0], name = job[1], expect = job[2], actual = job[3];
            result = runner(expect, actual, double);
            if (!result) {
              md.push("\u2714 " + name + "  ");
            } else {
              md.push("\u2718 " + name + "  ");
              md.push("    " + result + "  ");
            }
        }
      }
      md.push('\n<a href="#top" id="end">\u2b06</a>');
      return md.join('\n');
    };

    Test.prototype.section = function(text) {
      return this.jobs.push(("\n\n" + text + "\n-") + (new Array(text.length).join('-')) + '\n');
    };

    Test.prototype.custom = function(tests, runner) {
      var i, test, _i, _len;
      for (i = _i = 0, _len = tests.length; _i < _len; i = ++_i) {
        test = tests[i];
        if ('function' === type(test)) {
          this.jobs.push(test);
        } else {
          this.jobs.push([runner, test, tests[++_i], tests[++_i]]);
        }
      }
      return this.jobs.push('- - -');
    };

    Test.prototype.fail = function(result, delivery, expect, types) {
      if (types) {
        result = "" + result + " (" + (type(result)) + ")";
        expect = "" + expect + " (" + (type(expect)) + ")";
      }
      return "" + result + "\n    ...was " + delivery + ", but expected...\n    " + expect;
    };

    Test.prototype.throws = function(tests) {
      return this.custom(tests, (function(_this) {
        return function(expect, actual, double) {
          var e, error;
          error = false;
          try {
            actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (!error) {
            return "No exception thrown, expected...\n    " + expect;
          } else if (expect !== error) {
            return _this.fail(error, 'thrown', expect);
          }
        };
      })(this));
    };

    Test.prototype.equal = function(tests) {
      return this.custom(tests, (function(_this) {
        return function(expect, actual, double) {
          var e, error, result;
          error = false;
          try {
            result = actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (error) {
            return "Unexpected exception...\n    " + error;
          } else if (expect !== result) {
            return _this.fail(result, 'returned', expect, result + '' === expect + '');
          }
        };
      })(this));
    };

    Test.prototype.is = function(tests) {
      return this.custom(tests, (function(_this) {
        return function(expect, actual, double) {
          var e, error, result;
          error = false;
          try {
            result = actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (error) {
            return "Unexpected exception...\n    " + error;
          } else if (expect !== type(result)) {
            return _this.fail("type " + (type(result)), 'returned', "type " + expect);
          }
        };
      })(this));
    };

    type = function(x) {
      return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
    };

    return Test;

  })();

  test = new Test;

  Filog.runTest = test.run;

  test.section("Filog constructor exceptions");

  test.throws([
    "new Filog 1", "'opt' is type 'number', not 'string|object'", function() {
      return new Filog(1);
    }
  ]);

  test.section("Filog constructor usage");

  test.is([
    "Simple string selector", 'object', function() {
      return new Filog('#log');
    }
  ]);

}).call(this);
